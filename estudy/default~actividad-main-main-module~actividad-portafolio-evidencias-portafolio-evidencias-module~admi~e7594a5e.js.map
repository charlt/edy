{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/collections.es5.js","webpack:///./node_modules/@angular/cdk/esm5/drag-drop.es5.js","webpack:///./node_modules/@angular/cdk/esm5/scrolling.es5.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AACa;AACc;;AAE7D;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC,+CAAU,gBAAgB,+CAAE;AACjE;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,mCAAmC,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,yCAAyC,mCAAmC,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,yCAAyC,qCAAqC,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sDAAsD,qCAAqC,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA,mEAAmE,sEAAgB,EAAE,wDAAwD,wCAAwC,EAAE,wDAAwD;AAC/O;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEyI;AACzI;;;;;;;;;;;;;ACxgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACwE;AACkB;AAC1B;AACoN;AACzO;AACY;AACJ;AAC8B;;AAEjF;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,6BAA6B,EAAE,iCAAiC,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gEAAgE,+CAA+C,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,iDAAiD,oBAAoB,EAAE;AACvE;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,kCAAkC,6FAA+B,EAAE,gBAAgB;AACnF;AACA;AACA,UAAU;AACV;AACA,iCAAiC,6FAA+B,EAAE,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iDAAY;AACpD;AACA;AACA;AACA,sCAAsC,iDAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA,yBAAyB,4CAAO;AAChC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,EAAE;AACjC;AACA,yFAAyF,EAAE;AAC3F,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wCAAwC,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B,gBAAgB,EAAE,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,2BAA2B,mFAAqB;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,sDAAsD,QAAQ,2EAAa,SAAS,EAAE;AAC5G,oBAAoB,EAAE,gDAAgD,oDAAoD,EAAE;AAC5H,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,sBAAsB,2EAAa;AACnC,oCAAoC,EAAE;AACtC,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE,oDAAoD,EAAE;AACpF;AACA,8DAA8D,EAAE;AAChE,+DAA+D,EAAE;AACjE,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,iDAAiD,2EAAa;AACpF,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,sEAAsE,EAAE;AACxE,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA,mBAAmB,EAAE;AACrB;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qCAAqC,EAAE,6BAA6B;AACvG,4BAA4B,EAAE;AAC9B;AACA,oCAAoC,qCAAqC,EAAE,qBAAqB;AAChG,mDAAmD,EAAE;AACrD;AACA,aAAa;AACb;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,EAAE,mFAAmF,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,qDAAqD,EAAE;AACvD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+CAA+C,EAAE,2FAA2F,EAAE;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,0CAA0C,EAAE;AAC5C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wDAAU;AACpD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uCAAuC,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,8BAA8B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB,uCAAuC,4CAA4C,EAAE,cAAc,EAAE;AACrG,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wDAAwD,kCAAkC,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uEAAuE,kCAAkC,EAAE;AAC3G,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wDAAwD,mDAAmD,EAAE;AAC7G,mDAAmD,sCAAsC,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uDAAuD,wCAAwC,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,kCAAkC,6FAA+B;AACjE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2CAA2C,EAAE,UAAU,EAAE;AAChG;AACA,aAAa;AACb;AACA,uCAAuC,yCAAyC,EAAE,UAAU,EAAE;AAC9F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yEAAyE,2BAA2B,EAAE;AACtG;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yDAAyD,uCAAuC,EAAE;AAClG,yDAAyD,4CAA4C,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN,0DAA0D,sEAAgB,EAAE,+CAA+C,6BAA6B,4DAAM,CAAC,oDAAM,GAAG,4DAAM,CAAC,wDAAQ,GAAG,EAAE,+CAA+C;AAC3O;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA;AACA,2CAA2C;AAC3C,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,oEAAa,EAAE;AAC/B,SAAS;AACT,MAAM;AACN,kDAAkD,sEAAgB,EAAE,uCAAuC,qBAAqB,4DAAM,CAAC,wDAAQ,GAAG,4DAAM,CAAC,oDAAM,GAAG,4DAAM,CAAC,oEAAa,GAAG,4DAAM,oBAAoB,EAAE,uCAAuC;AAC5P;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,wBAAwB,4DAAc;AACtC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B,4DAAc;;AAExC;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,gCAAgC,OAAO,oDAAM,4BAA4B,GAAG,OAAO,sDAAQ,EAAE;AACtG,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,oCAAoC;AACpE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,uBAAuB,EAAE;AACzB,yDAAyD,0DAAG,wBAAwB;AACpF;AACA;AACA;AACA;AACA,aAAa,EAAE,EAAE;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA;AACA;AACA,wCAAwC,gEAAS;AACjD;AACA,YAAY,0DAAG;AACf,2BAA2B,EAAE;AAC7B;AACA,+CAA+C,qCAAqC,EAAE;AACtF,4CAA4C,uBAAuB,EAAE;AACrE;AACA,aAAa;AACb;AACA,YAAY,gEAAS;AACrB,uBAAuB,0CAAK,4CAA4C,2BAA2B,EAAE;AACrG,aAAa,GAAG,gEAAS;AACzB;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC,gBAAgB;AACjD,SAAS;AACT;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,iDAAiD;AAClF,iBAAiB,IAAI;AACrB;AACA;AACA,0CAA0C;AAC1C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,gCAAgC,OAAO,oDAAM,0BAA0B,GAAG,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AAC3H,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,oEAAa,EAAE;AAC/B,SAAS,yBAAyB;AAClC,SAAS,gCAAgC,OAAO,oDAAM,4BAA4B,GAAG;AACrF,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,iBAAiB;AAC1B,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,oBAAoB,OAAO,6DAAe,yBAAyB,oBAAoB,IAAI;AAC3F,4BAA4B,OAAO,0DAAY,2BAA2B;AAC1E,gCAAgC,OAAO,0DAAY,+BAA+B;AAClF,gBAAgB,OAAO,mDAAK,0BAA0B;AACtD,oBAAoB,OAAO,mDAAK,8BAA8B;AAC9D,+BAA+B,OAAO,mDAAK,iCAAiC;AAC5E,mCAAmC,OAAO,mDAAK,8BAA8B;AAC7E,oBAAoB,OAAO,mDAAK,8BAA8B;AAC9D,mBAAmB,OAAO,oDAAM,6BAA6B;AAC7D,oBAAoB,OAAO,oDAAM,8BAA8B;AAC/D,iBAAiB,OAAO,oDAAM,2BAA2B;AACzD,mBAAmB,OAAO,oDAAM,6BAA6B;AAC7D,kBAAkB,OAAO,oDAAM,4BAA4B;AAC3D,mBAAmB,OAAO,oDAAM,6BAA6B;AAC7D,iBAAiB,OAAO,oDAAM,2BAA2B;AACzD;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,oBAAoB,OAAO,mDAAK,uCAAuC;AACvE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,gEAAS,oBAAoB,gEAAS;AACxD;AACA,oEAAoE,sBAAsB,EAAE;AAC5F,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS,mBAAmB,gEAAS;AAC3D,6CAA6C,iCAAiC,EAAE;AAChF;AACA;AACA,uBAAuB,EAAE;AACzB,2BAA2B,yEAAW;AACtC;AACA,gCAAgC,EAAE,kDAAkD,yBAAyB,EAAE;AAC/G,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8DAA8D,+BAA+B,EAAE,uBAAuB,0BAA0B,EAAE;AAClJ;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,yBAAyB,0CAA0C;AACnE,yBAAyB,6DAA6D;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,yBAAyB;AAClC,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,uCAAuC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AACxF,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAClG,SAAS;AACT,MAAM;AACN;AACA,uBAAuB,OAAO,6DAAe,SAAS,gEAAU,cAAc,gBAAgB,EAAE;AAChG;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,uBAAuB,OAAO,mDAAK,qCAAqC;AACxE,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,uBAAuB,OAAO,mDAAK,qCAAqC;AACxE,cAAc,OAAO,mDAAK,EAAE;AAC5B,oBAAoB,OAAO,mDAAK,kCAAkC;AAClE,oBAAoB,OAAO,mDAAK,kCAAkC;AAClE,0BAA0B,OAAO,mDAAK,wCAAwC;AAC9E,mBAAmB,OAAO,oDAAM,iCAAiC;AACjE,mBAAmB,OAAO,oDAAM,iCAAiC;AACjE,kBAAkB,OAAO,oDAAM,gCAAgC;AAC/D,kBAAkB,OAAO,oDAAM,gCAAgC;AAC/D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEmU;AACnU;;;;;;;;;;;;;ACvuHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0T;AAC7P;AAC4C;AACwB;AACC;AACnE;AAC7B;AACuC;;AAEzE;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,kCAAkC,4DAAc;;AAEhD;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA,kEAAkE,2EAAoB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wBAAwB;AACxB,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,kBAAkB,kFAAoB,QAAQ,EAAE;AAC1E;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,qBAAqB,kFAAoB,QAAQ,EAAE;AAC7E;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,qBAAqB,kFAAoB,QAAQ,EAAE;AAC7E;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,mCAAmC,gEAAU,cAAc,kCAAkC,EAAE;AAC/F,yBAAyB;AACzB,iBAAiB,IAAI;AACrB;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,uBAAuB,OAAO,mDAAK,EAAE;AACrC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wCAAwC,yCAAyC,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uCAAuC,qCAAqC;AAC5E;AACA,mBAAmB,+CAAE;AACrB;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,qCAAqC,gEAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,+DAA+D,oCAAoC,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,iDAAiD,6DAAM;AACvD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8BAA8B,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,sDAAS,mDAAmD,+BAA+B,EAAE;AAChH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,8DAAQ;AACxB,MAAM;AACN,0DAA0D,sEAAgB,EAAE,+CAA+C,6BAA6B,4DAAM,CAAC,oDAAM,GAAG,4DAAM,CAAC,8DAAQ,GAAG,EAAE,+CAA+C;AAC3O;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB,sDAAQ,QAAQ,sDAAQ,uBAAuB,oDAAM,EAAE,8DAAQ;AAC/E;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC,oCAAoC,+CAAU;AAC9C;AACA,uBAAuB,sDAAS,gDAAgD,gEAAS;AACzF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,qBAAqB,kFAAoB,MAAM,uEAAiB;AAChE;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,gBAAgB,kFAAoB,MAAM,uEAAiB;AAC3D;AACA;AACA,qBAAqB,kFAAoB,MAAM,uEAAiB;AAChE;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,oFAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kFAAoB,MAAM,uEAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kFAAoB,MAAM,uEAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,yBAAyB;AAClC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE;AAC/D,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sEAAsE,4DAAuB,GAAG,kDAAa;AAC7G;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA,0CAA0C,4CAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+CAAU;AAClD;AACA,2DAA2D,sCAAsC,6BAA6B,EAAE,EAAE,EAAE;AACpI,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAS,aAAa,EAAE;AACpC;AACA;AACA;AACA,YAAY,gEAAS;AACrB,wCAAwC,kDAAkD,EAAE;AAC5F;AACA,SAAS,EAAE,EAAE;AACb;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gEAAS;AAClD,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,kCAAkC,mBAAmB;AACrD,mBAAmB,EAAE;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,aAAa,EAAE,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gDAAgD,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,6EAA6E,uCAAuC;AACpH;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA,0DAA0D,cAAc,kBAAkB,cAAc,eAAe,wBAAwB,4BAA4B,iCAAiC,oCAAoC,kBAAkB,MAAM,OAAO,gBAAgB,8CAA8C,QAAQ,UAAU,+EAA+E,gBAAgB,+ZAA+Z,eAAe,gBAAgB,cAAc,eAAe,oBAAoB,qBAAqB,UAAU,6EAA6E,eAAe,uZAAuZ,cAAc,iBAAiB,aAAa,gBAAgB,mBAAmB,sBAAsB,UAAU,2BAA2B,kBAAkB,MAAM,OAAO,WAAW,UAAU,qBAAqB,qCAAqC,QAAQ,UAAU,wBAAwB;AACjuD;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,+DAAiB;AACpD,qCAAqC,qEAAuB;AAC5D;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB,IAAI;AACrB;AACA;AACA,2DAA2D;AAC3D,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,oCAAoC,GAAG;AACjH,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS;AACT,MAAM;AACN;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,+BAA+B,OAAO,oDAAM,EAAE;AAC9C,2BAA2B,OAAO,uDAAS,6BAA6B;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,sCAAsC,4CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAS,aAAa,EAAE;AAChC;AACA,QAAQ,+DAAQ;AAChB;AACA;AACA;AACA,QAAQ,gEAAS;AACjB;AACA;AACA,SAAS;AACT;AACA,QAAQ,kEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,SAAS;AACT,gDAAgD,gEAAS;AACzD;AACA,oCAAoC,oDAAoD,EAAE;AAC1F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,qBAAqB,6EAAY;AACjC;AACA,oBAAoB,wEAAe,kBAAkB,+CAAU;AAC/D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,wCAAwC,kFAAkF,EAAE;AAC5H;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC,uBAAuB,EAAE;AACzB;AACA;AACA,8DAA8D,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,2BAA2B,EAAE;AAC7B,mEAAmE,EAAE;AACrE;AACA;AACA,4CAA4C;AAC5C,+DAA+D,EAAE;AACjE;AACA,kBAAkB;AAClB;AACA,2BAA2B,EAAE;AAC7B,uCAAuC,EAAE,6CAA6C,EAAE;AACxF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,EAAE,6CAA6C,EAAE;AACpF;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,yDAAW,EAAE;AAC7B,SAAS,OAAO,6DAAe,EAAE;AACjC,SAAS,+CAA+C,OAAO,sDAAQ,EAAE,GAAG;AAC5E,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,2BAA2B,OAAO,mDAAK,EAAE;AACzC,gCAAgC,OAAO,mDAAK,EAAE;AAC9C,iCAAiC,OAAO,mDAAK,EAAE;AAC/C,0CAA0C,OAAO,mDAAK,EAAE;AACxD;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAU,EAAE,oEAAc;AACxD;AACA,wBAAwB,4DAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAK,CAAC,sDAAS,oBAAoB,sDAAS;AAC5D,gBAAgB,+CAAE;AAClB;AACA;AACA,2EAA2E,oCAAoC,EAAE;AACjH,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,sBAAsB;AACtB;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,0CAA0C,EAAE;AAC5C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,sCAAsC,oCAAoC;AAC1E,oDAAoD,gEAAS;AAC7D;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa;AACb;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,8DAAQ,EAAE;AAC1B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN,uDAAuD,sEAAgB,EAAE,4CAA4C,0BAA0B,4DAAM,CAAC,8DAAQ,GAAG,4DAAM,CAAC,oDAAM,GAAG,EAAE,4CAA4C;AAC/N;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB,sDAAQ,QAAQ,sDAAQ,oBAAoB,8DAAQ,EAAE,oDAAM;AAC5E;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAE4a;AAC5a","file":"default~actividad-main-main-module~actividad-portafolio-evidencias-portafolio-evidencias-module~admi~e7594a5e.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nvar  /**\n * @abstract\n * @template T\n */\nDataSource = /** @class */ (function () {\n    function DataSource() {\n    }\n    return DataSource;\n}());\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nvar  /**\n * DataSource wrapper for a native array.\n * @template T\n */\nArrayDataSource = /** @class */ (function (_super) {\n    __extends(ArrayDataSource, _super);\n    function ArrayDataSource(_data) {\n        var _this = _super.call(this) || this;\n        _this._data = _data;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ArrayDataSource.prototype.connect = /**\n     * @return {?}\n     */\n    function () {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    };\n    /**\n     * @return {?}\n     */\n    ArrayDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n    function () { };\n    return ArrayDataSource;\n}(DataSource));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nvar  /**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nSelectionModel = /** @class */ (function () {\n    function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {\n        if (_multiple === void 0) { _multiple = false; }\n        if (_emitChanges === void 0) { _emitChanges = true; }\n        var _this = this;\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /** Selected values. */\n        get: /**\n         * Selected values.\n         * @return {?}\n         */\n        function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     */\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.select = /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        this._verifyValueAssignment(values);\n        values.forEach(function (value) { return _this._markSelected(value); });\n        this._emitChangeEvent();\n    };\n    /**\n     * Deselects a value or an array of values.\n     */\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        this._verifyValueAssignment(values);\n        values.forEach(function (value) { return _this._unmarkSelected(value); });\n        this._emitChangeEvent();\n    };\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    };\n    /**\n     * Clears all of the selected values.\n     */\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    function () {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    };\n    /**\n     * Determines whether a value is selected.\n     */\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return this._selection.has(value);\n    };\n    /**\n     * Determines whether the model does not have a value.\n     */\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    function () {\n        return this._selection.size === 0;\n    };\n    /**\n     * Determines whether the model has a value.\n     */\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    function () {\n        return !this.isEmpty();\n    };\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    };\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    SelectionModel.prototype.isMultipleSelection = /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    function () {\n        return this._multiple;\n    };\n    /** Emits a change event and clears the records of selected and deselected values. */\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    function () {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    };\n    /** Selects a value. */\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    };\n    /** Deselects a value. */\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    };\n    /** Clears out the selected values. */\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isEmpty()) {\n            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n        }\n    };\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    SelectionModel.prototype._verifyValueAssignment = /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    function (values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    };\n    return SelectionModel;\n}());\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = /** @class */ (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    UniqueSelectionDispatcher.prototype.listen = /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    function (listener) {\n        var _this = this;\n        this._listeners.push(listener);\n        return function () {\n            _this._listeners = _this._listeners.filter(function (registered) {\n                return listener !== registered;\n            });\n        };\n    };\n    /**\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._listeners = [];\n    };\n    UniqueSelectionDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = defineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n    return UniqueSelectionDispatcher;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\n//# sourceMappingURL=collections.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, Observable, merge } from 'rxjs';\nimport { ElementRef, Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, TemplateRef, defineInjectable, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, take, map, takeUntil, switchMap, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[(/** @type {?} */ (key))] = source[(/** @type {?} */ (key))];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    var userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    var computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    var propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    var value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(function (part) { return part.trim(); });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nvar activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nDragRef = /** @class */ (function () {\n    function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        var _this = this;\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Amount of subscriptions to the move event. Used to avoid\n         * hitting the zone if the consumer didn't subscribe to it.\n         */\n        this._moveEventSubscriptions = 0;\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable(function (observer) {\n            /** @type {?} */\n            var subscription = _this._moveEvents.subscribe(observer);\n            _this._moveEventSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._moveEventSubscriptions--;\n            };\n        });\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = function (event) {\n            _this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (_this._handles.length) {\n                /** @type {?} */\n                var targetHandle = _this._handles.find(function (handle) {\n                    /** @type {?} */\n                    var target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                });\n                if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                    _this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!_this.disabled) {\n                _this._initializeDragSequence(_this._rootElement, event);\n            }\n        };\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = function (event) {\n            if (!_this._hasStartedDragging) {\n                /** @type {?} */\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                /** @type {?} */\n                var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (distanceX + distanceY >= _this._config.dragStartThreshold) {\n                    _this._hasStartedDragging = true;\n                    _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (_this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                    _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n            _this._hasMoved = true;\n            event.preventDefault();\n            _this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (_this._dropContainer) {\n                _this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                var activeTransform = _this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                /** @type {?} */\n                var transform = getTransform(activeTransform.x, activeTransform.y);\n                // Preserve the previous `transform` value, if there was one. Note that we apply our own\n                // transform before the user's, because things like rotation can affect which direction\n                // the element will be translated towards.\n                _this._rootElement.style.transform = _this._initialTransform ?\n                    transform + ' ' + _this._initialTransform : transform;\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                    _this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (_this._moveEventSubscriptions > 0) {\n                _this._ngZone.run(function () {\n                    _this._moveEvents.next({\n                        source: _this,\n                        pointerPosition: constrainedPointerPosition,\n                        event: event,\n                        delta: _this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = function (event) {\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!_this._dragDropRegistry.isDragging(_this)) {\n                return;\n            }\n            _this._removeSubscriptions();\n            _this._dragDropRegistry.stopDragging(_this);\n            if (_this._handles) {\n                _this._rootElement.style.webkitTapHighlightColor = _this._rootElementTapHighlight;\n            }\n            if (!_this._hasStartedDragging) {\n                return;\n            }\n            _this.released.next({ source: _this });\n            if (!_this._dropContainer) {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                _this._passiveTransform.x = _this._activeTransform.x;\n                _this._passiveTransform.y = _this._activeTransform.y;\n                _this._ngZone.run(function () { return _this.ended.next({ source: _this }); });\n                _this._dragDropRegistry.stopDragging(_this);\n                return;\n            }\n            _this._animatePreviewToPlaceholder().then(function () {\n                _this._cleanupDragArtifacts(event);\n                _this._dragDropRegistry.stopDragging(_this);\n            });\n        };\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    Object.defineProperty(DragRef.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._toggleNativeDragInteractions();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._placeholder;\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    DragRef.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._rootElement;\n    };\n    /** Registers the handles that can be used to drag the element. */\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    DragRef.prototype.withHandles = /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    function (handles) {\n        (/** @type {?} */ (this))._handles = handles.map(function (handle) { return coerceElement(handle); });\n        (/** @type {?} */ (this))._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPreviewTemplate = /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPlaceholderTemplate = /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withRootElement = /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    function (rootElement) {\n        /** @type {?} */\n        var element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withBoundaryElement = /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    function (boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        return (/** @type {?} */ (this));\n    };\n    /** Removes the dragging functionality from the DOM element. */\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    DragRef.prototype.dispose = /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    };\n    /** Checks whether the element is currently being dragged. */\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.isDragging = /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    DragRef.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    };\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    DragRef.prototype.disableHandle = /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    function (handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    };\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    DragRef.prototype.enableHandle = /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    function (handle) {\n        this._disabledHandles.delete(handle);\n    };\n    /** Sets the layout direction of the draggable item. */\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DragRef.prototype.withDirection = /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the container that the item is part of. */\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    DragRef.prototype._withDropContainer = /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    function (container) {\n        this._dropContainer = container;\n    };\n    /** Unsubscribes from the global subscriptions. */\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._removeSubscriptions = /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n    };\n    /** Destroys the preview element and its ViewRef. */\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPreview = /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    };\n    /** Destroys the placeholder element and its ViewRef. */\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPlaceholder = /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    };\n    /** Starts the dragging sequence. */\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._startDragSequence = /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        if (this._dropContainer) {\n            /** @type {?} */\n            var element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            var preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            var placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            this._document.body.appendChild(preview);\n            this._dropContainer.start();\n        }\n    };\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    DragRef.prototype._initializeDragSequence = /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        var isDragging = this.isDragging();\n        /** @type {?} */\n        var isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        var isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        var rootElement = this._rootElement;\n        /** @type {?} */\n        var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._toggleNativeDragInteractions();\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragDropRegistry.startDragging(this, event);\n    };\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._cleanupDragArtifacts = /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var _this = this;\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            this._initialContainer.element.appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(function () {\n            /** @type {?} */\n            var container = (/** @type {?} */ (_this._dropContainer));\n            /** @type {?} */\n            var currentIndex = container.getItemIndex(_this);\n            var _a = _this._getPointerPositionOnPage(event), x = _a.x, y = _a.y;\n            /** @type {?} */\n            var isPointerOverContainer = container._isOverContainer(x, y);\n            _this.ended.next({ source: _this });\n            _this.dropped.next({\n                item: _this,\n                currentIndex: currentIndex,\n                previousIndex: _this._initialContainer.getItemIndex(_this),\n                container: container,\n                previousContainer: _this._initialContainer,\n                isPointerOverContainer: isPointerOverContainer\n            });\n            container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer);\n            _this._dropContainer = _this._initialContainer;\n        });\n    };\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    DragRef.prototype._updateActiveDropContainer = /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var _this = this;\n        var x = _a.x, y = _a.y;\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        var newContainer = (/** @type {?} */ (this._dropContainer))._getSiblingContainerFromPosition(this, x, y) ||\n            this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left it's\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(function () {\n                // Notify the old container that the item has left.\n                _this.exited.next({ item: _this, container: (/** @type {?} */ (_this._dropContainer)) });\n                (/** @type {?} */ (_this._dropContainer)).exit(_this);\n                // Notify the new container that the item has entered.\n                _this.entered.next({ item: _this, container: (/** @type {?} */ (newContainer)) });\n                _this._dropContainer = (/** @type {?} */ (newContainer));\n                _this._dropContainer.enter(_this, x, y);\n            });\n        }\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    };\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPreviewElement = /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var previewConfig = this._previewTemplate;\n        /** @type {?} */\n        var previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        var preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            var viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = viewRef.rootNodes[0];\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            var element = this._rootElement;\n            /** @type {?} */\n            var elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = elementRect.width + \"px\";\n            preview.style.height = elementRect.height + \"px\";\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    };\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    DragRef.prototype._animatePreviewToPlaceholder = /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    function () {\n        var _this = this;\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        var placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        var duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(function () {\n            return new Promise(function (resolve) {\n                /** @type {?} */\n                var handler = (/** @type {?} */ ((function (event) {\n                    if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                        _this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                })));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                var timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                _this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    };\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPlaceholderElement = /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        var placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = this._placeholderRef.rootNodes[0];\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    };\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionInElement = /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        /** @type {?} */\n        var elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    };\n    /** Determines the point of the page that was touched by the user. */\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionOnPage = /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    };\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getConstrainedPointerPosition = /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            point.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            point.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n            /** @type {?} */\n            var boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            var previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            var minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            var minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            var maxX = boundaryRect.right - (previewRect.width - pickupX);\n            point.x = clamp(point.x, minX, maxX);\n            point.y = clamp(point.y, minY, maxY);\n        }\n        return point;\n    };\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    DragRef.prototype._updatePointerDirectionDelta = /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    function (pointerPositionOnPage) {\n        var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n        /** @type {?} */\n        var delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        var changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        var changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    };\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._toggleNativeDragInteractions = /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        var shouldEnable = this.disabled || this._handles.length > 0;\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    };\n    /** Removes the manually-added event listeners from the root element. */\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    DragRef.prototype._removeRootElementListeners = /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    };\n    return DragRef;\n}());\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    var clone = (/** @type {?} */ (node.cloneNode(true)));\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    return event.type.startsWith('touch');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    var from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    var to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    var target = array[from];\n    /** @type {?} */\n    var delta = to < from ? -1 : 1;\n    for (var i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nvar _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nDropListRef = /** @class */ (function () {\n    function DropListRef(element, _dragDropRegistry, _document) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = \"cdk-drop-list-ref-\" + _uniqueIdCounter++;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = function () { return true; };\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        _dragDropRegistry.registerDropContainer(this);\n        this._document = _document;\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    DropListRef.prototype.dispose = /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    };\n    /** Whether an item from this list is currently being dragged. */\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    DropListRef.prototype.isDragging = /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._isDragging;\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    DropListRef.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._activeDraggables = this._draggables.slice();\n        this._cacheOwnPosition();\n        this._cacheItemPositions();\n        this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this.entered.next({ item: item, container: this });\n        this.start();\n        // We use the coordinates of where the item entered the drop\n        // zone to figure out at which index it should be inserted.\n        /** @type {?} */\n        var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        /** @type {?} */\n        var currentIndex = this._activeDraggables.indexOf(item);\n        /** @type {?} */\n        var newPositionReference = this._activeDraggables[newIndex];\n        /** @type {?} */\n        var placeholder = item.getPlaceholderElement();\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            this._activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            var element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            this._activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this.element.appendChild(placeholder);\n            this._activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    DropListRef.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._reset();\n        this.exited.next({ item: item, container: this });\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     */\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    DropListRef.prototype.drop = /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._reset();\n        this.dropped.next({\n            item: item,\n            currentIndex: currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer: previousContainer,\n            isPointerOverContainer: isPointerOverContainer\n        });\n    };\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withItems = /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    function (items) {\n        var _this = this;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach(function (item) { return item._withDropContainer((/** @type {?} */ (_this))); });\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the layout direction of the drop list. */\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DropListRef.prototype.withDirection = /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    DropListRef.prototype.connectedTo = /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    function (connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withOrientation = /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    function (orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    DropListRef.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n    };\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    DropListRef.prototype.isReceiving = /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    function () {\n        return this._activeSiblings.size > 0;\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    DropListRef.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if it's out of range.\n        if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        var siblings = this._itemPositions;\n        /** @type {?} */\n        var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n        /** @type {?} */\n        var siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        var delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        var oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item: item\n        });\n        siblings.forEach(function (sibling, index) {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            var isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            var offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n    };\n    /** Caches the position of the drop list. */\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheOwnPosition = /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._clientRect = this.element.getBoundingClientRect();\n    };\n    /** Refreshes the position cache of the items and sibling containers. */\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheItemPositions = /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(function (drag) {\n            /** @type {?} */\n            var elementToMeasure = _this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            /** @type {?} */\n            var clientRect = elementToMeasure.getBoundingClientRect();\n            return {\n                drag: drag,\n                offset: 0,\n                // We need to clone the `clientRect` here, because all the values on it are readonly\n                // and we need to be able to update them. Also we can't use a spread here, because\n                // the values on a `ClientRect` aren't own properties. See:\n                // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n                clientRect: {\n                    top: clientRect.top,\n                    right: clientRect.right,\n                    bottom: clientRect.bottom,\n                    left: clientRect.left,\n                    width: clientRect.width,\n                    height: clientRect.height\n                }\n            };\n        }).sort(function (a, b) {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    };\n    /** Resets the container to its initial state. */\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._reset = /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(function (item) { return item.getRootElement().style.transform = ''; });\n        this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n    };\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingOffsetPx = /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentIndex, siblings, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            var start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            var end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    };\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isPointerNearDropContainer = /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    function (pointerX, pointerY) {\n        var _a = this._clientRect, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        /** @type {?} */\n        var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    };\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemOffsetPx = /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentPosition, newPosition, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    };\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemIndexFromPointerPosition = /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, delta) {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, function (_a, _, array) {\n            var drag = _a.drag, clientRect = _a.clientRect;\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                var direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n    };\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._canReceive = /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        var elementFromPoint = this._document.elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n    };\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    DropListRef.prototype._startReceiving = /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    function (sibling) {\n        /** @type {?} */\n        var activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n        }\n    };\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    DropListRef.prototype._stopReceiving = /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    function (sibling) {\n        this._activeSiblings.delete(sibling);\n    };\n    return DropListRef;\n}());\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nvar activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nvar DragDropRegistry = /** @class */ (function () {\n    function DragDropRegistry(_ngZone, _document) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = function (event) {\n            if (_this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDropContainer = /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(\"Drop instance with id \\\"\" + drop.id + \"\\\" has already been registered.\");\n            }\n            this._dropInstances.add(drop);\n        }\n    };\n    /** Adds a drag item instance to the registry. */\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDragItem = /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        var _this = this;\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(function () {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            });\n        }\n    };\n    /** Removes a drop container from the registry. */\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDropContainer = /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        this._dropInstances.delete(drop);\n    };\n    /** Removes a drag item instance from the registry. */\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDragItem = /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    };\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragDropRegistry.prototype.startDragging = /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (drag, event) {\n        var _this = this;\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            var isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: function (e) { return _this.pointerMove.next((/** @type {?} */ (e))); },\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: function (e) { return _this.pointerUp.next((/** @type {?} */ (e))); },\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // TODO(crisbeto): prevent mouse wheel scrolling while\n            // dragging until we've set up proper scroll handling.\n            if (!isTouchEvent) {\n                this._globalListeners.set('wheel', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(function () {\n                _this._globalListeners.forEach(function (config, name) {\n                    _this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    };\n    /** Stops dragging a drag item instance. */\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.stopDragging = /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    };\n    /** Gets whether a drag item instance is currently being dragged. */\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.isDragging = /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        return this._activeDragInstances.has(drag);\n    };\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    DragDropRegistry.prototype.getDropContainer = /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        return Array.from(this._dropInstances).find(function (instance) { return instance.id === id; });\n    };\n    /**\n     * @return {?}\n     */\n    DragDropRegistry.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n        this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    /** Clears out the global event listeners from the `document`. */\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    DragDropRegistry.prototype._clearGlobalListeners = /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._globalListeners.forEach(function (config, name) {\n            _this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    };\n    DragDropRegistry.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDropRegistry.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ DragDropRegistry.ngInjectableDef = defineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(inject(NgZone), inject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n    return DragDropRegistry;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nvar DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nvar DragDrop = /** @class */ (function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    DragDrop.prototype.createDrag = /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    function (element, config) {\n        if (config === void 0) { config = DEFAULT_CONFIG; }\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    };\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    DragDrop.prototype.createDropList = /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    function (element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document);\n    };\n    DragDrop.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDrop.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewportRuler },\n        { type: DragDropRegistry }\n    ]; };\n    /** @nocollapse */ DragDrop.ngInjectableDef = defineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(inject(DOCUMENT), inject(NgZone), inject(ViewportRuler), inject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n    return DragDrop;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nvar CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nvar CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nvar CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nvar CdkDragHandle = /** @class */ (function () {\n    function CdkDragHandle(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n        /** Whether starting to drag through this handle is disabled. */\n        get: /**\n         * Whether starting to drag through this handle is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._stateChanges.next(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDragHandle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.complete();\n    };\n    CdkDragHandle.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle'\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragHandle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n    ]; };\n    CdkDragHandle.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n    };\n    return CdkDragHandle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nvar CdkDragPlaceholder = /** @class */ (function () {\n    function CdkDragPlaceholder(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPlaceholder.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPlaceholder.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPlaceholder.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPlaceholder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nvar CdkDragPreview = /** @class */ (function () {\n    function CdkDragPreview(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPreview.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPreview]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPreview.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPreview.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPreview;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nvar CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nvar CdkDrag = /** @class */ (function () {\n    function CdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir, \n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop, _changeDetectorRef) {\n        var _this = this;\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable(function (observer) {\n            /** @type {?} */\n            var subscription = _this._dragRef.moved.pipe(map(function (movedEvent) { return ({\n                source: _this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta\n            }); })).subscribe(observer);\n            return function () {\n                subscription.unsubscribe();\n            };\n        });\n        // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n        if (dragDrop) {\n            this._dragRef = dragDrop.createDrag(element, config);\n        }\n        else {\n            this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler, dragDropRegistry);\n        }\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._dragRef.disabled = this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    CdkDrag.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getPlaceholderElement();\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    CdkDrag.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getRootElement();\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    CdkDrag.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._dragRef.reset();\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(function () {\n            _this._updateRootElement();\n            // Listen for any newly-added handles.\n            _this._handles.changes.pipe(startWith(_this._handles), \n            // Sync the new handles with the DragRef.\n            tap(function (handles) {\n                /** @type {?} */\n                var childHandleElements = handles\n                    .filter(function (handle) { return handle._parentDrag === _this; })\n                    .map(function (handle) { return handle.element; });\n                _this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap(function (handles) {\n                return merge.apply(void 0, handles.map(function (item) { return item._stateChanges; }));\n            }), takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                var dragRef = _this._dragRef;\n                /** @type {?} */\n                var handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var rootSelectorChange = changes['rootElementSelector'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    };\n    /** Syncs the root element with the `DragRef`. */\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._updateRootElement = /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this.element.nativeElement;\n        /** @type {?} */\n        var rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(\"cdkDrag must be attached to an element node. \" +\n                (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    };\n    /** Gets the boundary element, based on the `boundaryElementSelector`. */\n    /**\n     * Gets the boundary element, based on the `boundaryElementSelector`.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._getBoundaryElement = /**\n     * Gets the boundary element, based on the `boundaryElementSelector`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selector = this.boundaryElementSelector;\n        return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n    };\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe(function () {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                var dir = _this._dir;\n                /** @type {?} */\n                var placeholder = _this._placeholderTemplate ? {\n                    template: _this._placeholderTemplate.templateRef,\n                    context: _this._placeholderTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                var preview = _this._previewTemplate ? {\n                    template: _this._previewTemplate.templateRef,\n                    context: _this._previewTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref\n                    .withBoundaryElement(_this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    };\n    /** Handles the events from the underlying `DragRef`. */\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._handleEvents = /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.started.subscribe(function () {\n            _this.started.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            if (_this._changeDetectorRef) {\n                // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n                _this._changeDetectorRef.markForCheck();\n            }\n        });\n        ref.released.subscribe(function () {\n            _this.released.emit({ source: _this });\n        });\n        ref.ended.subscribe(function () {\n            _this.ended.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            if (_this._changeDetectorRef) {\n                // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n                _this._changeDetectorRef.markForCheck();\n            }\n        });\n        ref.entered.subscribe(function (event) {\n            _this.entered.emit({\n                container: event.container.data,\n                item: _this\n            });\n        });\n        ref.exited.subscribe(function (event) {\n            _this.exited.emit({\n                container: event.container.data,\n                item: _this\n            });\n        });\n        ref.dropped.subscribe(function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: _this\n            });\n        });\n    };\n    CdkDrag.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDrag.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: ViewportRuler },\n        { type: DragDropRegistry },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: DragDrop },\n        { type: ChangeDetectorRef }\n    ]; };\n    CdkDrag.propDecorators = {\n        _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n        _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n        _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n        data: [{ type: Input, args: ['cdkDragData',] }],\n        lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n        rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n        boundaryElementSelector: [{ type: Input, args: ['cdkDragBoundary',] }],\n        disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n        started: [{ type: Output, args: ['cdkDragStarted',] }],\n        released: [{ type: Output, args: ['cdkDragReleased',] }],\n        ended: [{ type: Output, args: ['cdkDragEnded',] }],\n        entered: [{ type: Output, args: ['cdkDragEntered',] }],\n        exited: [{ type: Output, args: ['cdkDragExited',] }],\n        dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n        moved: [{ type: Output, args: ['cdkDragMoved',] }]\n    };\n    return CdkDrag;\n}());\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    var currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nvar CdkDropListGroup = /** @class */ (function () {\n    function CdkDropListGroup() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from inside this group is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropListGroup.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._items.clear();\n    };\n    CdkDropListGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                },] },\n    ];\n    CdkDropListGroup.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n    };\n    return CdkDropListGroup;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nvar _uniqueIdCounter$1 = 0;\nvar ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nvar CdkDropList = /** @class */ (function () {\n    function CdkDropList(element, dragDropRegistry, _changeDetectorRef, _dir, _group, _document, \n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop) {\n        var _this = this;\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = \"cdk-drop-list-\" + _uniqueIdCounter$1++;\n        this._disabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = function () { return true; };\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n        if (dragDrop) {\n            this._dropListRef = dragDrop.createDropList(element);\n        }\n        else {\n            this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n        }\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = function (drag, drop) {\n            return _this.enterPredicate(drag.data, drop.data);\n        };\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from this container is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from this container is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (!!this._group && this._group.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe(function (items) {\n            _this._dropListRef.withItems(items.map(function (drag) { return drag._dragRef; }));\n        });\n    };\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    CdkDropList.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        this._dropListRef.start();\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     */\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    CdkDropList.prototype.drop = /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    CdkDropList.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._dropListRef.exit(item._dragRef);\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    CdkDropList.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        /** @type {?} */\n        var result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    };\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(function (value) { return ref.withDirection(value); });\n        }\n        ref.beforeStarted.subscribe(function () {\n            /** @type {?} */\n            var siblings = coerceArray(_this.connectedTo).map(function (drop) {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find(function (list) { return list.id === drop; }))) : drop;\n            });\n            if (_this._group) {\n                _this._group._items.forEach(function (drop) {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            ref.lockAxis = _this.lockAxis;\n            ref\n                .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                .withOrientation(_this.orientation);\n        });\n    };\n    /** Handles events from the underlying DropListRef. */\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._handleEvents = /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe(function () {\n            _this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n            _this.entered.emit({\n                container: _this,\n                item: event.item.data\n            });\n        });\n        ref.exited.subscribe(function (event) {\n            _this.exited.emit({\n                container: _this,\n                item: event.item.data\n            });\n        });\n        ref.sorted.subscribe(function (event) {\n            _this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: _this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     */\n    CdkDropList._dropLists = [];\n    CdkDropList.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CdkDropListGroup, useValue: ɵ0 },\n                        { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDropList.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragDropRegistry },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: DragDrop }\n    ]; };\n    CdkDropList.propDecorators = {\n        _draggables: [{ type: ContentChildren, args: [forwardRef(function () { return CdkDrag; }), {\n                        // Explicitly set to false since some of the logic below makes assumptions about it.\n                        // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                        descendants: false\n                    },] }],\n        connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n        data: [{ type: Input, args: ['cdkDropListData',] }],\n        orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n        id: [{ type: Input }],\n        lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n        disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n        enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n        dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n        entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n        exited: [{ type: Output, args: ['cdkDropListExited',] }],\n        sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n    };\n    return CdkDropList;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DragDropModule = /** @class */ (function () {\n    function DragDropModule() {\n    }\n    DragDropModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [\n                        DragDrop,\n                    ]\n                },] },\n    ];\n    return DragDropModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { __extends } from 'tslib';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nvar  /**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nFixedSizeVirtualScrollStrategy = /** @class */ (function () {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    function (viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    };\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.detach = /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    function () {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    };\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    function (itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    };\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    function () {\n        this._updateRenderedRange();\n    };\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    function () {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    };\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.onContentRendered = /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    function () { };\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    function (index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    };\n    /** Update the viewport's total content size. */\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    };\n    /** Update the viewport's rendered range. */\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        var scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        var firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        var renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        var newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        var viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        var dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        var startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    };\n    return FixedSizeVirtualScrollStrategy;\n}());\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nvar CdkFixedSizeVirtualScroll = /** @class */ (function () {\n    function CdkFixedSizeVirtualScroll() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"itemSize\", {\n        /** The size of the items in the list (in pixels). */\n        get: /**\n         * The size of the items in the list (in pixels).\n         * @return {?}\n         */\n        function () { return this._itemSize; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._itemSize = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"minBufferPx\", {\n        /**\n         * The minimum amount of buffer rendered beyond the viewport (in pixels).\n         * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n         */\n        get: /**\n         * The minimum amount of buffer rendered beyond the viewport (in pixels).\n         * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n         * @return {?}\n         */\n        function () { return this._minBufferPx; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._minBufferPx = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"maxBufferPx\", {\n        /**\n         * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n         */\n        get: /**\n         * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n         * @return {?}\n         */\n        function () { return this._maxBufferPx; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._maxBufferPx = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkFixedSizeVirtualScroll.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    };\n    CdkFixedSizeVirtualScroll.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [{\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(function () { return CdkFixedSizeVirtualScroll; })],\n                        }],\n                },] },\n    ];\n    CdkFixedSizeVirtualScroll.propDecorators = {\n        itemSize: [{ type: Input }],\n        minBufferPx: [{ type: Input }],\n        maxBufferPx: [{ type: Input }]\n    };\n    return CdkFixedSizeVirtualScroll;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nvar ScrollDispatcher = /** @class */ (function () {\n    function ScrollDispatcher(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.register = /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    function (scrollable) {\n        var _this = this;\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(function () { return _this._scrolled.next(scrollable); }));\n        }\n    };\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.deregister = /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    function (scrollable) {\n        /** @type {?} */\n        var scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    };\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrolled = /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    function (auditTimeInMs) {\n        var _this = this;\n        if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable(function (observer) {\n            if (!_this._globalSubscription) {\n                _this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            var subscription = auditTimeInMs > 0 ?\n                _this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                _this._scrolled.subscribe(observer);\n            _this._scrolledCount++;\n            return function () {\n                subscription.unsubscribe();\n                _this._scrolledCount--;\n                if (!_this._scrolledCount) {\n                    _this._removeGlobalListener();\n                }\n            };\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._removeGlobalListener();\n        this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });\n        this._scrolled.complete();\n    };\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.ancestorScrolled = /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    function (elementRef, auditTimeInMs) {\n        /** @type {?} */\n        var ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    };\n    /** Returns all registered Scrollables that contain the provided element. */\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.getAncestorScrollContainers = /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    function (elementRef) {\n        var _this = this;\n        /** @type {?} */\n        var scrollingContainers = [];\n        this.scrollContainers.forEach(function (_subscription, scrollable) {\n            if (_this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    };\n    /** Returns true if the element is contained within the provided Scrollable. */\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._scrollableContainsElement = /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    function (scrollable, elementRef) {\n        /** @type {?} */\n        var element = elementRef.nativeElement;\n        /** @type {?} */\n        var scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    };\n    /** Sets up the global scroll listeners. */\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._addGlobalListener = /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n            return fromEvent(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });\n        });\n    };\n    /** Cleans up the global scroll listener. */\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._removeGlobalListener = /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    };\n    ScrollDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ScrollDispatcher.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: Platform }\n    ]; };\n    /** @nocollapse */ ScrollDispatcher.ngInjectableDef = defineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(inject(NgZone), inject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n    return ScrollDispatcher;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nvar SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nvar CdkScrollable = /** @class */ (function () {\n    function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n        var _this = this;\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable(function (observer) {\n            return _this.ngZone.runOutsideAngular(function () {\n                return fromEvent(_this.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this._destroyed))\n                    .subscribe(observer);\n            });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    CdkScrollable.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.scrollDispatcher.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    CdkScrollable.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    CdkScrollable.prototype.elementScrolled = /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    function () {\n        return this._elementScrolled;\n    };\n    /** Gets the ElementRef for the viewport. */\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    CdkScrollable.prototype.getElementRef = /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    function () {\n        return this.elementRef;\n    };\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    CdkScrollable.prototype.scrollTo = /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    function (options) {\n        /** @type {?} */\n        var el = this.elementRef.nativeElement;\n        /** @type {?} */\n        var isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    };\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    CdkScrollable.prototype._applyScrollToOptions = /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        /** @type {?} */\n        var el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    };\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    CdkScrollable.prototype.measureScrollOffset = /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    function (from) {\n        /** @type {?} */\n        var LEFT = 'left';\n        /** @type {?} */\n        var RIGHT = 'right';\n        /** @type {?} */\n        var el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        var isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    };\n    CdkScrollable.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkScrollable.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: NgZone },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    return CdkScrollable;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\nvar CdkVirtualScrollViewport = /** @class */ (function (_super) {\n    __extends(CdkVirtualScrollViewport, _super);\n    function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;\n        _this.elementRef = elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        _this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        _this._renderedRangeSubject = new Subject();\n        /**\n         * The direction the viewport scrolls.\n         */\n        _this.orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        _this.scrolledIndexChange = new Observable(function (observer) {\n            return _this._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n                return Promise.resolve().then(function () { return _this.ngZone.run(function () { return observer.next(index); }); });\n            });\n        });\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();\n        /**\n         * The transform used to scale the spacer to the same size as all content, including content that\n         * is not currently rendered.\n         */\n        _this._totalContentSizeTransform = '';\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        _this._totalContentSize = 0;\n        /**\n         * The currently rendered range of indices.\n         */\n        _this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        _this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        _this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        _this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        _this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        _this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        _this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        _super.prototype.ngOnInit.call(this);\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n            _this._measureViewportSize();\n            _this._scrollStrategy.attach(_this);\n            _this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(function () { return _this._scrollStrategy.onContentScrolled(); });\n            _this._markChangeDetectionNeeded();\n        }); });\n    };\n    /**\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    /** Attaches a `CdkVirtualForOf` to this viewport. */\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.attach = /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    function (forOf) {\n        var _this = this;\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(function () {\n            _this._forOf = forOf;\n            _this._forOf.dataStream.pipe(takeUntil(_this._detachedSubject)).subscribe(function (data) {\n                /** @type {?} */\n                var newLength = data.length;\n                if (newLength !== _this._dataLength) {\n                    _this._dataLength = newLength;\n                    _this._scrollStrategy.onDataLengthChanged();\n                }\n                _this._doChangeDetection();\n            });\n        });\n    };\n    /** Detaches the current `CdkVirtualForOf`. */\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.detach = /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    function () {\n        this._forOf = null;\n        this._detachedSubject.next();\n    };\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.getDataLength = /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    function () {\n        return this._dataLength;\n    };\n    /** Gets the size of the viewport (in pixels). */\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.getViewportSize = /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    function () {\n        return this._viewportSize;\n    };\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.getRenderedRange = \n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    function () {\n        return this._renderedRange;\n    };\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.setTotalContentSize = /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    function (size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            /** @type {?} */\n            var axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = \"scale\" + axis + \"(\" + this._totalContentSize + \")\";\n            this._markChangeDetectionNeeded();\n        }\n    };\n    /** Sets the currently rendered range of indices. */\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.setRenderedRange = /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    function (range) {\n        var _this = this;\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(function () { return _this._scrollStrategy.onContentRendered(); });\n        }\n    };\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    function () {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    };\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.setRenderedContentOffset = /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    function (offset, to) {\n        var _this = this;\n        if (to === void 0) { to = 'to-start'; }\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        var isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        var isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        var axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        var axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        var transform = \"translate\" + axis + \"(\" + Number(axisDirection * offset) + \"px)\";\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += \" translate\" + axis + \"(-100%)\";\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(function () {\n                if (_this._renderedContentOffsetNeedsRewrite) {\n                    _this._renderedContentOffset -= _this.measureRenderedContentSize();\n                    _this._renderedContentOffsetNeedsRewrite = false;\n                    _this.setRenderedContentOffset(_this._renderedContentOffset);\n                }\n                else {\n                    _this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    };\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.scrollToOffset = /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    function (offset, behavior) {\n        if (behavior === void 0) { behavior = 'auto'; }\n        /** @type {?} */\n        var options = { behavior: behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    };\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.scrollToIndex = /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    function (index, behavior) {\n        if (behavior === void 0) { behavior = 'auto'; }\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    };\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.measureScrollOffset = /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    function (from) {\n        return _super.prototype.measureScrollOffset.call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    };\n    /** Measure the combined size of all of the rendered items. */\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.measureRenderedContentSize = /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    };\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.measureRangeSize = /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    function (range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    };\n    /** Update the viewport dimensions and re-render. */\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype.checkViewportSize = /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    function () {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    };\n    /** Measure the viewport size. */\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype._measureViewportSize = /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    };\n    /** Queue up change detection to run. */\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    function (runAfter) {\n        var _this = this;\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                _this._doChangeDetection();\n            }); });\n        }\n    };\n    /** Run change detection. */\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    CdkVirtualScrollViewport.prototype._doChangeDetection = /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(function () { return _this._changeDetectorRef.markForCheck(); });\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        var runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (var _i = 0, runAfterChangeDetection_1 = runAfterChangeDetection; _i < runAfterChangeDetection_1.length; _i++) {\n            var fn = runAfterChangeDetection_1[_i];\n            fn();\n        }\n    };\n    CdkVirtualScrollViewport.decorators = [\n        { type: Component, args: [{selector: 'cdk-virtual-scroll-viewport',\n                    template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n                    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                    host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [{\n                            provide: CdkScrollable,\n                            useExisting: CdkVirtualScrollViewport,\n                        }]\n                },] },\n    ];\n    /** @nocollapse */\n    CdkVirtualScrollViewport.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ScrollDispatcher }\n    ]; };\n    CdkVirtualScrollViewport.propDecorators = {\n        orientation: [{ type: Input }],\n        scrolledIndexChange: [{ type: Output }],\n        _contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }]\n    };\n    return CdkVirtualScrollViewport;\n}(CdkScrollable));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    var el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    var rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nvar CdkVirtualForOf = /** @class */ (function () {\n    function CdkVirtualForOf(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        var _this = this;\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(function (_a) {\n            var prev = _a[0], cur = _a[1];\n            return _this._changeDataSource(prev, cur);\n        }), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(function (data) {\n            _this._data = data;\n            _this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n            _this._renderedRange = range;\n            ngZone.run(function () { return _this.viewChange.next(_this._renderedRange); });\n            _this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForOf\", {\n        /** The DataSource to display. */\n        get: /**\n         * The DataSource to display.\n         * @return {?}\n         */\n        function () {\n            return this._cdkVirtualForOf;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._cdkVirtualForOf = value;\n            /** @type {?} */\n            var ds = isDataSource(value) ? value :\n                // Slice the value if its an NgIterable to ensure we're working with an array.\n                new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n            this._dataSourceChanges.next(ds);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTrackBy\", {\n        /**\n         * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n         * the item and produces a value to be used as the item's identity when tracking changes.\n         */\n        get: /**\n         * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n         * the item and produces a value to be used as the item's identity when tracking changes.\n         * @return {?}\n         */\n        function () {\n            return this._cdkVirtualForTrackBy;\n        },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            var _this = this;\n            this._needsUpdate = true;\n            this._cdkVirtualForTrackBy = fn ?\n                function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); } :\n                undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTemplate\", {\n        /** The template used to stamp out new elements. */\n        set: /**\n         * The template used to stamp out new elements.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value) {\n                this._needsUpdate = true;\n                this._template = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype.measureRangeSize = /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    function (range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        var renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        var rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        var totalSize = 0;\n        /** @type {?} */\n        var i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            var view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            var j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    };\n    /**\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            var changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._viewport.detach();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (var _i = 0, _a = this._templateCache; _i < _a.length; _i++) {\n            var view = _a[_i];\n            view.destroy();\n        }\n    };\n    /** React to scroll state changes in the viewport. */\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._onRenderedDataChange = /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    };\n    /** Swap out one `DataSource` for another. */\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._changeDataSource = /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    function (oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs.connect(this);\n    };\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._updateContext = /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var count = this._data.length;\n        /** @type {?} */\n        var i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            var view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    };\n    /** Apply changes to the DOM. */\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._applyChanges = /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                var view = _this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                _this._cacheView(_this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                var view = (/** @type {?} */ (_this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                _this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange(function (record) {\n            /** @type {?} */\n            var view = (/** @type {?} */ (_this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        /** @type {?} */\n        var count = this._data.length;\n        /** @type {?} */\n        var i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            var view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    };\n    /** Cache the given detached view. */\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._cacheView = /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    function (view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            var index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    };\n    /** Inserts a view for a new item, either from the cache or by creating a new one. */\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._insertViewForNewItem = /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    };\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._updateComputedContextProperties = /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    };\n    /** Creates a new embedded view and moves it to the given index */\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._createEmbeddedViewAt = /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n        if (index < this._viewContainerRef.length) {\n            this._viewContainerRef.move(view, index);\n        }\n        return view;\n    };\n    /** Inserts a recycled view from the cache at the given index. */\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._insertViewFromCache = /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    };\n    /** Detaches the embedded view at the given index. */\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    CdkVirtualForOf.prototype._detachView = /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    };\n    CdkVirtualForOf.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkVirtualForOf.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: TemplateRef },\n        { type: IterableDiffers },\n        { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n        { type: NgZone }\n    ]; };\n    CdkVirtualForOf.propDecorators = {\n        cdkVirtualForOf: [{ type: Input }],\n        cdkVirtualForTrackBy: [{ type: Input }],\n        cdkVirtualForTemplate: [{ type: Input }],\n        cdkVirtualForTemplateCacheSize: [{ type: Input }]\n    };\n    return CdkVirtualForOf;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ScrollingModule = /** @class */ (function () {\n    function ScrollingModule() {\n    }\n    ScrollingModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [BidiModule, PlatformModule],\n                    exports: [\n                        BidiModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkScrollable,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                    ],\n                    declarations: [\n                        CdkFixedSizeVirtualScroll,\n                        CdkScrollable,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                    ],\n                },] },\n    ];\n    return ScrollingModule;\n}());\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nvar ScrollDispatchModule = /** @class */ (function () {\n    function ScrollDispatchModule() {\n    }\n    ScrollDispatchModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [ScrollingModule],\n                    exports: [ScrollingModule],\n                },] },\n    ];\n    return ScrollDispatchModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nvar ViewportRuler = /** @class */ (function () {\n    function ViewportRuler(_platform, ngZone) {\n        var _this = this;\n        this._platform = _platform;\n        ngZone.runOutsideAngular(function () {\n            _this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            _this._invalidateCache = _this.change().subscribe(function () { return _this._updateViewportSize(); });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ViewportRuler.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._invalidateCache.unsubscribe();\n    };\n    /** Returns the viewport's width and height. */\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportSize = /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    function () {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        var output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    };\n    /** Gets a ClientRect for the viewport's bounds. */\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportRect = /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    function () {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        var scrollPosition = this.getViewportScrollPosition();\n        var _a = this.getViewportSize(), width = _a.width, height = _a.height;\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height: height,\n            width: width,\n        };\n    };\n    /** Gets the (top, left) scroll position of the viewport. */\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportScrollPosition = /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    function () {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        var documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        var documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        var top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top: top, left: left };\n    };\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    ViewportRuler.prototype.change = /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    function (throttleTime) {\n        if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    };\n    /** Updates the cached viewport size. */\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    ViewportRuler.prototype._updateViewportSize = /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    };\n    ViewportRuler.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ViewportRuler.ctorParameters = function () { return [\n        { type: Platform },\n        { type: NgZone }\n    ]; };\n    /** @nocollapse */ ViewportRuler.ngInjectableDef = defineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(inject(Platform), inject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n    return ViewportRuler;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nvar VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n//# sourceMappingURL=scrolling.es5.js.map\n"],"sourceRoot":""}