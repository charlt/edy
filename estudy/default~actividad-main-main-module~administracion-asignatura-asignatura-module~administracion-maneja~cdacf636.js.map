{"version":3,"sources":["webpack:///./node_modules/ckeditor4-angular/fesm5/ckeditor4-angular.js","webpack:///./node_modules/load-script/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAC8E;AAClE;AACiB;AAC3B;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAY;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpoEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW,2DAA2D;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,4BAA4B,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb;AACA,8CAA8C,wDAAU;AACxD,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;AACA,6BAA6B,gEAAiB;AAC9C,iCAAiC,gEAAU,cAAc,4BAA4B,EAAE;AACvF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,QAAQ,8DAAQ;AAChB,sBAAsB,0DAAW,EAAE,4DAAY;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAE6C;AAC7C;;;;;;;;;;;;;ACheA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"default~actividad-main-main-module~administracion-asignatura-asignatura-module~administracion-maneja~cdacf636.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { EventEmitter, ElementRef, NgZone, Input, Output, Component, forwardRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport loadScript from 'load-script';\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nvar promise;\nfunction getEditorNamespace(editorURL) {\n    if (editorURL.length < 1) {\n        return Promise.reject(new TypeError('CKEditor URL must be a non-empty string.'));\n    }\n    if ('CKEDITOR' in window) {\n        return Promise.resolve(CKEDITOR);\n    }\n    else if (!promise) {\n        promise = new Promise(function (scriptResolve, scriptReject) {\n            loadScript(editorURL, function (err) {\n                if (err) {\n                    scriptReject(err);\n                }\n                else {\n                    scriptResolve(CKEDITOR);\n                }\n                promise = undefined;\n            });\n        });\n    }\n    return promise;\n}\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nvar CKEditorComponent = /** @class */ (function () {\n    function CKEditorComponent(elementRef, ngZone) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is `textarea`.\n         */\n        this.tagName = 'textarea';\n        /**\n         * The type of the editor interface.\n         *\n         * By default editor interface will be initialized as `divarea` editor which is an inline editor with fixed UI.\n         * You can change interface type by choosing between `divarea` and `inline` editor interface types.\n         *\n         * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n         * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n         * to learn more.\n         */\n        this.type = \"classic\" /* CLASSIC */;\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the editor data is loaded, e.g. after calling setData()\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n         * editor's method. It corresponds with the `editor#dataReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n         */\n        this.dataReady = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n         * event. For performance reasons this event may be called even when data didn't really changed.\n         * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n         * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n         * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n         *\n         * See more: https://angular.io/guide/template-syntax#two-way-binding---\n         */\n        this.dataChange = new EventEmitter();\n        /**\n         * Fires when the native drop event occurs. It corresponds with the `editor#dragstart`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n         * event.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * Fires when the native drop event occurs. It corresponds with the `editor#dragend`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n         * event.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n         * event.\n         */\n        this.drop = new EventEmitter();\n        /**\n         * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n         * event.\n         */\n        this.fileUploadResponse = new EventEmitter();\n        /**\n         * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n         * event.\n         */\n        this.fileUploadRequest = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is focused. It corresponds with the `editor#focus`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * Fires after the user initiated a paste action, but before the data is inserted.\n         * It corresponds with the `editor#paste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n         * event.\n         */\n        this.paste = new EventEmitter();\n        /**\n         * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n         * event.\n         */\n        this.afterPaste = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * If the component is read–only before the editor instance is created, it remembers that state,\n         * so the editor can become read–only once it is ready.\n         */\n        this._readOnly = null;\n        this._data = null;\n        this._destroyed = false;\n        /**\n         * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n         *\n         * Defaults to 'https://cdn.ckeditor.com/4.15.0/standard-all/ckeditor.js'\n         */\n        this.editorUrl = 'https://cdn.ckeditor.com/4.15.0/standard-all/ckeditor.js';\n    }\n    CKEditorComponent_1 = CKEditorComponent;\n    Object.defineProperty(CKEditorComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Keeps track of the editor's data.\n         *\n         * It's also decorated as an input which is useful when not using the ngModel.\n         *\n         * See https://angular.io/api/forms/NgModel to learn more.\n         */\n        set: function (data) {\n            if (data === this._data) {\n                return;\n            }\n            if (this.instance) {\n                this.instance.setData(data);\n                // Data may be changed by ACF.\n                this._data = this.instance.getData();\n                return;\n            }\n            this._data = data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CKEditorComponent.prototype, \"readOnly\", {\n        get: function () {\n            if (this.instance) {\n                return this.instance.readOnly;\n            }\n            return this._readOnly;\n        },\n        /**\n         * When set `true`, the editor becomes read-only.\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n         * to learn more.\n         */\n        set: function (isReadOnly) {\n            if (this.instance) {\n                this.instance.setReadOnly(isReadOnly);\n                return;\n            }\n            // Delay setting read-only state until editor initialization.\n            this._readOnly = isReadOnly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CKEditorComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        getEditorNamespace(this.editorUrl).then(function () {\n            // Check if component instance was destroyed before `ngAfterViewInit` call (#110).\n            // Here, `this.instance` is still not initialized and so additional flag is needed.\n            if (_this._destroyed) {\n                return;\n            }\n            _this.ngZone.runOutsideAngular(_this.createEditor.bind(_this));\n        }).catch(window.console.error);\n    };\n    CKEditorComponent.prototype.ngOnDestroy = function () {\n        var _this = this;\n        this._destroyed = true;\n        this.ngZone.runOutsideAngular(function () {\n            if (_this.instance) {\n                _this.instance.destroy();\n                _this.instance = null;\n            }\n        });\n    };\n    CKEditorComponent.prototype.writeValue = function (value) {\n        this.data = value;\n    };\n    CKEditorComponent.prototype.registerOnChange = function (callback) {\n        this.onChange = callback;\n    };\n    CKEditorComponent.prototype.registerOnTouched = function (callback) {\n        this.onTouched = callback;\n    };\n    CKEditorComponent.prototype.createEditor = function () {\n        var _this = this;\n        var element = document.createElement(this.tagName);\n        this.elementRef.nativeElement.appendChild(element);\n        if (this.type === \"divarea\" /* DIVAREA */) {\n            this.config = this.ensureDivareaPlugin(this.config || {});\n        }\n        var instance = this.type === \"inline\" /* INLINE */\n            ? CKEDITOR.inline(element, this.config)\n            : CKEDITOR.replace(element, this.config);\n        instance.once('instanceReady', function (evt) {\n            _this.instance = instance;\n            // Read only state may change during instance initialization.\n            _this.readOnly = _this._readOnly !== null ? _this._readOnly : _this.instance.readOnly;\n            _this.subscribe(_this.instance);\n            var undo = instance.undoManager;\n            if (_this.data !== null) {\n                undo && undo.lock();\n                instance.setData(_this.data, { callback: function () {\n                        // Locking undoManager prevents 'change' event.\n                        // Trigger it manually to updated bound data.\n                        if (_this.data !== instance.getData()) {\n                            undo ? instance.fire('change') : instance.fire('dataReady');\n                        }\n                        undo && undo.unlock();\n                        _this.ngZone.run(function () {\n                            _this.ready.emit(evt);\n                        });\n                    } });\n            }\n            else {\n                _this.ngZone.run(function () {\n                    _this.ready.emit(evt);\n                });\n            }\n        });\n    };\n    CKEditorComponent.prototype.subscribe = function (editor) {\n        var _this = this;\n        editor.on('focus', function (evt) {\n            _this.ngZone.run(function () {\n                _this.focus.emit(evt);\n            });\n        });\n        editor.on('paste', function (evt) {\n            _this.ngZone.run(function () {\n                _this.paste.emit(evt);\n            });\n        });\n        editor.on('afterPaste', function (evt) {\n            _this.ngZone.run(function () {\n                _this.afterPaste.emit(evt);\n            });\n        });\n        editor.on('dragend', function (evt) {\n            _this.ngZone.run(function () {\n                _this.dragEnd.emit(evt);\n            });\n        });\n        editor.on('dragstart', function (evt) {\n            _this.ngZone.run(function () {\n                _this.dragStart.emit(evt);\n            });\n        });\n        editor.on('drop', function (evt) {\n            _this.ngZone.run(function () {\n                _this.drop.emit(evt);\n            });\n        });\n        editor.on('fileUploadRequest', function (evt) {\n            _this.ngZone.run(function () {\n                _this.fileUploadRequest.emit(evt);\n            });\n        });\n        editor.on('fileUploadResponse', function (evt) {\n            _this.ngZone.run(function () {\n                _this.fileUploadResponse.emit(evt);\n            });\n        });\n        editor.on('blur', function (evt) {\n            _this.ngZone.run(function () {\n                if (_this.onTouched) {\n                    _this.onTouched();\n                }\n                _this.blur.emit(evt);\n            });\n        });\n        editor.on('dataReady', this.propagateChange, this);\n        if (this.instance.undoManager) {\n            editor.on('change', this.propagateChange, this);\n        }\n        // If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\n        else {\n            editor.on('selectionCheck', this.propagateChange, this);\n        }\n    };\n    CKEditorComponent.prototype.propagateChange = function (event) {\n        var _this = this;\n        this.ngZone.run(function () {\n            var newData = _this.instance.getData();\n            if (event.name === 'change') {\n                _this.change.emit(event);\n            }\n            else if (event.name === 'dataReady') {\n                _this.dataReady.emit(event);\n            }\n            if (newData === _this.data) {\n                return;\n            }\n            _this._data = newData;\n            _this.dataChange.emit(newData);\n            if (_this.onChange) {\n                _this.onChange(newData);\n            }\n        });\n    };\n    CKEditorComponent.prototype.ensureDivareaPlugin = function (config) {\n        var extraPlugins = config.extraPlugins, removePlugins = config.removePlugins;\n        extraPlugins = this.removePlugin(extraPlugins, 'divarea') || '';\n        extraPlugins = extraPlugins.concat(typeof extraPlugins === 'string' ? ',divarea' : 'divarea');\n        if (removePlugins && removePlugins.includes('divarea')) {\n            removePlugins = this.removePlugin(removePlugins, 'divarea');\n            console.warn('[CKEDITOR] divarea plugin is required to initialize editor using Angular integration.');\n        }\n        return Object.assign({}, config, { extraPlugins: extraPlugins, removePlugins: removePlugins });\n    };\n    CKEditorComponent.prototype.removePlugin = function (plugins, toRemove) {\n        if (!plugins) {\n            return null;\n        }\n        var isString = typeof plugins === 'string';\n        if (isString) {\n            plugins = plugins.split(',');\n        }\n        plugins = plugins.filter(function (plugin) { return plugin !== toRemove; });\n        if (isString) {\n            plugins = plugins.join(',');\n        }\n        return plugins;\n    };\n    var CKEditorComponent_1;\n    CKEditorComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"config\", void 0);\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"tagName\", void 0);\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"data\", null);\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"readOnly\", null);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"ready\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"dataReady\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"change\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"dataChange\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"dragStart\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"dragEnd\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"drop\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"fileUploadResponse\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"fileUploadRequest\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"focus\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"paste\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"afterPaste\", void 0);\n    __decorate([\n        Output()\n    ], CKEditorComponent.prototype, \"blur\", void 0);\n    __decorate([\n        Input()\n    ], CKEditorComponent.prototype, \"editorUrl\", void 0);\n    CKEditorComponent = CKEditorComponent_1 = __decorate([\n        Component({\n            selector: 'ckeditor',\n            template: '<ng-template></ng-template>',\n            providers: [\n                {\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return CKEditorComponent_1; }),\n                    multi: true,\n                }\n            ]\n        })\n    ], CKEditorComponent);\n    return CKEditorComponent;\n}());\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nvar CKEditorModule = /** @class */ (function () {\n    function CKEditorModule() {\n    }\n    CKEditorModule = __decorate([\n        NgModule({\n            imports: [FormsModule, CommonModule],\n            declarations: [CKEditorComponent],\n            exports: [CKEditorComponent]\n        })\n    ], CKEditorModule);\n    return CKEditorModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };\n//# sourceMappingURL=ckeditor4-angular.js.map\n","\nmodule.exports = function load (src, opts, cb) {\n  var head = document.head || document.getElementsByTagName('head')[0]\n  var script = document.createElement('script')\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n  cb = cb || function() {}\n\n  script.type = opts.type || 'text/javascript'\n  script.charset = opts.charset || 'utf8';\n  script.async = 'async' in opts ? !!opts.async : true\n  script.src = src\n\n  if (opts.attrs) {\n    setAttributes(script, opts.attrs)\n  }\n\n  if (opts.text) {\n    script.text = '' + opts.text\n  }\n\n  var onend = 'onload' in script ? stdOnEnd : ieOnEnd\n  onend(script, cb)\n\n  // some good legacy browsers (firefox) fail the 'in' detection above\n  // so as a fallback we always set onload\n  // old IE will ignore this and new IE will set onload\n  if (!script.onload) {\n    stdOnEnd(script, cb);\n  }\n\n  head.appendChild(script)\n}\n\nfunction setAttributes(script, attrs) {\n  for (var attr in attrs) {\n    script.setAttribute(attr, attrs[attr]);\n  }\n}\n\nfunction stdOnEnd (script, cb) {\n  script.onload = function () {\n    this.onerror = this.onload = null\n    cb(null, script)\n  }\n  script.onerror = function () {\n    // this.onload = null here is necessary\n    // because even IE9 works not like others\n    this.onerror = this.onload = null\n    cb(new Error('Failed to load ' + this.src), script)\n  }\n}\n\nfunction ieOnEnd (script, cb) {\n  script.onreadystatechange = function () {\n    if (this.readyState != 'complete' && this.readyState != 'loaded') return\n    this.onreadystatechange = null\n    cb(null, script) // there is no way to catch loading errors in IE8\n  }\n}\n"],"sourceRoot":""}